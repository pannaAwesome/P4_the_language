
PARSER_BEGIN(Scanner)

import java.io.*;

public class Scanner {

    public static void main(String[] args) throws ParseException, FileNotFoundException {
        if ( args.length < 1 ) {
           System.out.println("Please pass in the filename for a parameter.");
           System.exit(1);
        }

        Scanner parser = new Scanner( new FileInputStream(args[0]) );

        try {
            SimpleNode n = parser.PROG();
            n.dump("");
            System.out.println("Finished succesfully");
        }catch(Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }
}

PARSER_END(Scanner)

SKIP: /* Whitespace */
{
  "\t"
| "\r"
| " "
}

TOKEN: /* Keywords */
{
    <IMPORT:        "IMPORT">
|   <IN:            "IN">
|   <MODEL:         "MODEL">
|   <ANALYZE:       "ANALYZE">
|   <WITH:          "WITH">
|   <ROW:           "ROW">
|   <COL:           "COL">
|   <NOHEADERS:     "NOHEADERS">
|   <IDKEY:         "ID">
|   <TO:            "TO">
}

TOKEN: /* Whitespace */
{
    <EOL:           "\n">
}

TOKEN: /* Operators */
{
    <COMPARISON:    "<=" | ">=" | "<" | ">" | "==">
|   <EQUAL:         "=">
|   <DEFINERULE:    ":" >
|   <IS:            "IS" >
|   <OR:            "OR">
|   <AND:           "AND">
|   <NOT:           "NOT">
}

TOKEN: /* Regex */
{
    <CONSTRAINT:    "LETTERS"|"NUMBERS"|"DECIMAL"|"INTEGER"|"EMPTY"|"LOWERCASE"|"UPPERCASE">
|   <MAXLENGTH:      "MAXLENGTH">
|   <MINLENGTH:      "MINLENGTH">
|   <CONTAINS:      "CONTAINS">
}

TOKEN: /* Delimiters */
{
    <COMMA:      ",">
|   <LPAREN:     "(">
|   <RPAREN:     ")">
|   <ARGSSTART:  "BEGIN">
|   <ARGSSTOP:   "END">
}

TOKEN: /* Literals */
{
    <INT:           ("-")?["1"-"9"](["0"-"9"])* | ("-")?"0" >
|   <FLOAT:         ("-")?"0" "." (["0"-"9"])+ | ("-")?["1"-"9"] (["0"-"9"])* "." (["0"-"9"])+ >
|   <STRING:        "\"" (~["\""])* "\"" >
}

TOKEN: /* Identifiers */
{
    <FILENAME:      (["A"-"Z","a"-"z","0"-"9","-","_"])+".csv">
|   <ID:            (["A"-"Z","a"-"z"](["A"-"Z","a"-"z","0"-"9","_"])*)|("_"(["A"-"Z","a"-"z","0"-"9"])(["A"-"Z","a"-"z","0"-"9","_"])*)>
}


MORE :
{
    "//" : IN_COMMENT
}

<IN_COMMENT>
SPECIAL_TOKEN :
{
  <COMMENT: "//" > : DEFAULT
}

<IN_COMMENT>
MORE :
{
  < ~[] >
}

SimpleNode PROG():    {}  
{ 
    (MDL() IMPRT() STMT() | IMPRT() MDL() STMT()) 
    { return jjtThis; }
}

void IMPRT() #IMPORT:   
{}  
{ <IMPORT> FLNM() <IN> IDEN() (<ARGSSTART> (<EOL>)+ IMOPTIONS() <ARGSSTOP>)? (<EOL>)+ }

void IMOPTIONS():
{}
{
    <NOHEADERS> (<EOL>)+ (<IDKEY> (IDEN() | INTEGER()) (<EOL>)+)? | <IDKEY> (IDEN() | INTEGER()) (<EOL>)+ (<NOHEADERS> (<EOL>)+)?
}

void FLNM():    
{ Token t; }
{
    t = <FILENAME>
    {
        jjtThis.value = t.image;
    }
}

void MDL() #MODEL:     
{}  
{ <MODEL> IDEN() <ARGSSTART> (<EOL>)+ (RLE())* <ARGSSTOP> (<EOL>)+}

void RLE() #void:     
{}
{ (IDEN() <DEFINERULE> EXPR() (<EOL>)+)#RULE(>1) }

void EXPR() #void:
{}
{
    OREXPR()
}

void OREXPR() #void:
{ int count = 0; }
{
    (ANDEXPR() (<OR> { count++; } ANDEXPR())*)#OR(count>0)
}

void ANDEXPR() #void:
{ int count = 0; }
{
    (VPEXPR() (<AND> { count++; } VPEXPR())*)#AND(count>0)
}

void VPEXPR() #void:
{}
{
    VALEXPR()
    | <LPAREN> EXPR() <RPAREN>
}

void VALEXPR():
{ Token t; }
{
    IDEN()
    (t = <IS> REGEX()
    | t = <COMPARISON> NUM()) { jjtThis.value = t.image;}
}

void REGEX():
{}
{
    <LPAREN> REGOREXPR() <RPAREN> | CONSTRAINTS() | STRING()
}

void REGOREXPR():
{}
{
    REGEXPR() (<OR> REGEXPR())*
}

void REGEXPR():
{}
{
    <LPAREN> REGOREXPR() <RPAREN> REGEXPR()
|   ((<NOT>)? ((<CONTAINS>)? STRING() | CONSTRAINTS() (<COMMA> LENGTH())?))*
}

void LENGTH():
{}
{
    <MINLENGTH> <EQUAL> INTEGER() (<COMMA> <MAXLENGTH> <EQUAL> INTEGER())?
|   <MAXLENGTH> <EQUAL> INTEGER() (<COMMA> <MINLENGTH> <EQUAL> INTEGER())?
}

void CONSTRAINTS():
{ Token t; }
{
    t = <CONSTRAINT>
    { jjtThis.value = t.image; }
}

void STRING():
{ Token t; }
{
    (t = <STRING> { jjtThis.value = t.image; })
}

void NUM() #void:     
{}
{ INTEGER() | FLOATY() }

void INTEGER(): 
{ Token t; }
{
    t = <INT>
    {
        jjtThis.value = t.image;
    }
}

void FLOATY(): 
{ Token t; }
{
    t = <FLOAT>
    {
        jjtThis.value = t.image;
    }
}

void STMT() #void:
{}
{ ANLZ() ((<EOL>)+ | <EOF>) STMT() | <EOF> }

void ANLZ() #ANALYZE:
{}
{ <ANALYZE> IDEN() <WITH> IDEN() (<ARGSSTART> (<EOL>)+ ANOPTIONS() <ARGSSTOP>)?}

void ANOPTIONS():
{}
{
    RULEOPT() (ROWOPT() (COLOPT())? | COLOPT() (ROWOPT())?)
}

void RULEOPT():
{}
{
    (IDEN() (<EOL>)+)+
}

void ROWOPT():
{}
{
   ROWS() (<EOL>)+
}

void COLOPT():
{}
{
    COLS() (<EOL>)+
}

void ROWS():
{}
{
    <ROW> INDEX()(<COMMA> INDEX())*
}

void COLS():
{}
{
    <COL> ( IDEN()(<COMMA> IDEN())* | (INDEX()(<COMMA> INDEX())*))
}

void INDEX():
{}
{
    INTEGER() (<TO> INTEGER())?
}

void IDEN():
{ Token t; }
{
    t = <ID>
    {
        jjtThis.value = t.image;
    }
}