/* Generated By:JJTree&JavaCC: Do not edit this line. Scanner.java */
import java.io.*;

public class Scanner/*@bgen(jjtree)*/implements ScannerTreeConstants, ScannerConstants {/*@bgen(jjtree)*/
  protected static JJTScannerState jjtree = new JJTScannerState();
    public static void main(String[] args) throws ParseException, FileNotFoundException {
        if ( args.length < 1 ) {
           System.out.println("Please pass in the filename for a parameter.");
           System.exit(1);
        }

        Scanner parser = new Scanner( new FileInputStream(args[0]) );

        try {
            SimpleNode n = parser.PROG();
            n.dump("");
            System.out.println("Finished succesfully");
        }catch(Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }

  static final public SimpleNode PROG() throws ParseException {
                       /*@bgen(jjtree) PROG */
  SimpleNode jjtn000 = new SimpleNode(JJTPROG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODEL:
        MDL();
        IMPRT();
        STMT();
        break;
      case IMPORT:
        IMPRT();
        MDL();
        STMT();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void IMPRT() throws ParseException {
 /*@bgen(jjtree) IMPORT */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IMPORT);
      FLNM();
      jj_consume_token(IN);
      IDEN();
      jj_consume_token(ARGSSTART);
      label_1:
      while (true) {
        jj_consume_token(EOL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
      }
      IMOPTIONS();
      jj_consume_token(ARGSSTOP);
      label_2:
      while (true) {
        jj_consume_token(EOL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void IMOPTIONS() throws ParseException {
 /*@bgen(jjtree) IMOPTIONS */
  SimpleNode jjtn000 = new SimpleNode(JJTIMOPTIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOHEADERS:
        jj_consume_token(NOHEADERS);
        label_3:
        while (true) {
          jj_consume_token(EOL);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOL:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_3;
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDKEY:
          jj_consume_token(IDKEY);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            IDEN();
            break;
          case INT:
            INTEGER();
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_4:
          while (true) {
            jj_consume_token(EOL);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
              ;
              break;
            default:
              jj_la1[5] = jj_gen;
              break label_4;
            }
          }
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        break;
      case IDKEY:
        jj_consume_token(IDKEY);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          IDEN();
          break;
        case INT:
          INTEGER();
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_5:
        while (true) {
          jj_consume_token(EOL);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOL:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_5;
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOHEADERS:
          jj_consume_token(NOHEADERS);
          label_6:
          while (true) {
            jj_consume_token(EOL);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
              ;
              break;
            default:
              jj_la1[9] = jj_gen;
              break label_6;
            }
          }
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void FLNM() throws ParseException {
 /*@bgen(jjtree) FLNM */
  SimpleNode jjtn000 = new SimpleNode(JJTFLNM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(FILENAME);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.value = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void MDL() throws ParseException {
 /*@bgen(jjtree) MODEL */
  SimpleNode jjtn000 = new SimpleNode(JJTMODEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MODEL);
      IDEN();
      jj_consume_token(ARGSSTART);
      label_7:
      while (true) {
        jj_consume_token(EOL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_7;
        }
      }
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_8;
        }
        RLE();
      }
      jj_consume_token(ARGSSTOP);
      label_9:
      while (true) {
        jj_consume_token(EOL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_9;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void RLE() throws ParseException {
    SimpleNode jjtn001 = new SimpleNode(JJTRULE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      IDEN();
      jj_consume_token(DEFINERULE);
      EXPR();
      label_10:
      while (true) {
        jj_consume_token(EOL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_10;
        }
      }
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
    }
  }

  static final public void EXPR() throws ParseException {
    OREXPR();
  }

  static final public void OREXPR() throws ParseException {
  int count = 0;
      SimpleNode jjtn001 = new SimpleNode(JJTOR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
      ANDEXPR();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_11;
        }
        jj_consume_token(OR);
                       count++;
        ANDEXPR();
      }
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  count > 0);
      }
    }
  }

  static final public void ANDEXPR() throws ParseException {
  int count = 0;
      SimpleNode jjtn001 = new SimpleNode(JJTAND);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
      VPEXPR();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_12;
        }
        jj_consume_token(AND);
                       count++;
        VPEXPR();
      }
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  count > 0);
      }
    }
  }

  static final public void VPEXPR() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      VALEXPR();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      EXPR();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void VALEXPR() throws ParseException {
 /*@bgen(jjtree) VALEXPR */
  SimpleNode jjtn000 = new SimpleNode(JJTVALEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      IDEN();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IS:
        t = jj_consume_token(IS);
        REGEX();
        break;
      case COMPARISON:
        t = jj_consume_token(COMPARISON);
        NUM();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.value = t.image;
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void REGEX() throws ParseException {
 /*@bgen(jjtree) REGEX */
  SimpleNode jjtn000 = new SimpleNode(JJTREGEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        REGOREXPR();
        jj_consume_token(RPAREN);
        break;
      case CONSTRAINT:
        CONSTRAINTS();
        break;
      case STRING:
        STRING();
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void REGOREXPR() throws ParseException {
 /*@bgen(jjtree) REGOREXPR */
  SimpleNode jjtn000 = new SimpleNode(JJTREGOREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      REGEXPR();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_13;
        }
        jj_consume_token(OR);
        REGEXPR();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void REGEXPR() throws ParseException {
 /*@bgen(jjtree) REGEXPR */
  SimpleNode jjtn000 = new SimpleNode(JJTREGEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        REGOREXPR();
        jj_consume_token(RPAREN);
        break;
      case NOT:
      case CONSTRAINT:
      case CONTAINS:
      case STRING:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
          jj_consume_token(NOT);
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONTAINS:
        case STRING:
          label_14:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CONTAINS:
              jj_consume_token(CONTAINS);
              break;
            default:
              jj_la1[23] = jj_gen;
              ;
            }
            STRING();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CONTAINS:
            case STRING:
              ;
              break;
            default:
              jj_la1[24] = jj_gen;
              break label_14;
            }
          }
          break;
        case CONSTRAINT:
          CONSTRAINTS();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
            LENGTH();
            break;
          default:
            jj_la1[25] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void LENGTH() throws ParseException {
 /*@bgen(jjtree) LENGTH */
  SimpleNode jjtn000 = new SimpleNode(JJTLENGTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINLENGTH:
        jj_consume_token(MINLENGTH);
        jj_consume_token(EQUAL);
        INTEGER();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          jj_consume_token(MAXLENGTH);
          jj_consume_token(EQUAL);
          INTEGER();
          break;
        default:
          jj_la1[28] = jj_gen;
          ;
        }
        break;
      case MAXLENGTH:
        jj_consume_token(MAXLENGTH);
        jj_consume_token(EQUAL);
        INTEGER();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          jj_consume_token(MINLENGTH);
          jj_consume_token(EQUAL);
          INTEGER();
          break;
        default:
          jj_la1[29] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void CONSTRAINTS() throws ParseException {
 /*@bgen(jjtree) CONSTRAINTS */
  SimpleNode jjtn000 = new SimpleNode(JJTCONSTRAINTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CONSTRAINT);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.value = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void STRING() throws ParseException {
 /*@bgen(jjtree) STRING */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRING);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.value = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void NUM() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      INTEGER();
      break;
    case FLOAT:
      FLOATY();
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void INTEGER() throws ParseException {
 /*@bgen(jjtree) INTEGER */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INT);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.value = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void FLOATY() throws ParseException {
 /*@bgen(jjtree) FLOATY */
  SimpleNode jjtn000 = new SimpleNode(JJTFLOATY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(FLOAT);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.value = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void STMT() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANALYZE:
      ANLZ();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        label_15:
        while (true) {
          jj_consume_token(EOL);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOL:
            ;
            break;
          default:
            jj_la1[32] = jj_gen;
            break label_15;
          }
        }
        break;
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      STMT();
      break;
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ANLZ() throws ParseException {
 /*@bgen(jjtree) ANALYZE */
  SimpleNode jjtn000 = new SimpleNode(JJTANALYZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ANALYZE);
      IDEN();
      jj_consume_token(WITH);
      IDEN();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARGSSTART:
        jj_consume_token(ARGSSTART);
        label_16:
        while (true) {
          jj_consume_token(EOL);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOL:
            ;
            break;
          default:
            jj_la1[35] = jj_gen;
            break label_16;
          }
        }
        ANOPTIONS();
        jj_consume_token(ARGSSTOP);
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ANOPTIONS() throws ParseException {
 /*@bgen(jjtree) ANOPTIONS */
  SimpleNode jjtn000 = new SimpleNode(JJTANOPTIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_17;
        }
        IDEN();
        label_18:
        while (true) {
          jj_consume_token(EOL);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOL:
            ;
            break;
          default:
            jj_la1[38] = jj_gen;
            break label_18;
          }
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ROW:
        ROWS();
        label_19:
        while (true) {
          jj_consume_token(EOL);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOL:
            ;
            break;
          default:
            jj_la1[39] = jj_gen;
            break label_19;
          }
        }
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_20;
        }
        IDEN();
        label_21:
        while (true) {
          jj_consume_token(EOL);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOL:
            ;
            break;
          default:
            jj_la1[42] = jj_gen;
            break label_21;
          }
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COL:
        COLS();
        label_22:
        while (true) {
          jj_consume_token(EOL);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOL:
            ;
            break;
          default:
            jj_la1[43] = jj_gen;
            break label_22;
          }
        }
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          ;
          break;
        default:
          jj_la1[45] = jj_gen;
          break label_23;
        }
        IDEN();
        label_24:
        while (true) {
          jj_consume_token(EOL);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOL:
            ;
            break;
          default:
            jj_la1[46] = jj_gen;
            break label_24;
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ROWS() throws ParseException {
 /*@bgen(jjtree) ROWS */
  SimpleNode jjtn000 = new SimpleNode(JJTROWS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ROW);
      INDEX();
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[55] = jj_gen;
          break label_31;
        }
        jj_consume_token(COMMA);
        INDEX();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void COLS() throws ParseException {
 /*@bgen(jjtree) COLS */
  SimpleNode jjtn000 = new SimpleNode(JJTCOLS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(COL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        IDEN();
        label_32:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[56] = jj_gen;
            break label_32;
          }
          jj_consume_token(COMMA);
          IDEN();
        }
        break;
      case INT:
        INDEX();
        label_33:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[57] = jj_gen;
            break label_33;
          }
          jj_consume_token(COMMA);
          INDEX();
        }
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void INDEX() throws ParseException {
 /*@bgen(jjtree) INDEX */
  SimpleNode jjtn000 = new SimpleNode(JJTINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      INTEGER();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DASH:
        jj_consume_token(DASH);
        INTEGER();
        break;
      default:
        jj_la1[59] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void IDEN() throws ParseException {
 /*@bgen(jjtree) IDEN */
  SimpleNode jjtn000 = new SimpleNode(JJTIDEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.value = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ScannerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[60];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x50,0x2000,0x2000,0x2000,0x80000000,0x2000,0x1000,0x80000000,0x2000,0x2000,0x800,0x1800,0x2000,0x0,0x2000,0x2000,0x40000,0x80000,0x8000000,0x24000,0x8200000,0x40000,0x100000,0x1000000,0x1000000,0x2000000,0x1200000,0x9300000,0x2000000,0x2000000,0xc00000,0x80000000,0x2000,0x2001,0x81,0x2000,0x20000000,0x0,0x2000,0x2000,0x200,0x0,0x2000,0x2000,0x400,0x0,0x2000,0x2000,0x400,0x0,0x2000,0x2000,0x200,0x0,0x2000,0x2000000,0x2000000,0x2000000,0x80000000,0x4000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x8,0x0,0x2,0x0,0x0,0x0,0x2,0x0,0x2,0x2,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x8,0x0,};
   }

  /** Constructor with InputStream. */
  public Scanner(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Scanner(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ScannerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Scanner(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ScannerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Scanner(ScannerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ScannerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[39];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 60; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 39; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
