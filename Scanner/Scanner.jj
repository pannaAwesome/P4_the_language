options {
  IGNORE_CASE = false;
}

PARSER_BEGIN(Scanner)

import java.io.*;

public class Scanner {

    public static void main(String[] args) throws FileNotFoundException
    {
        try {
            new Scanner(new java.io.FileInputStream(args[0])).PROG();
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }
}

PARSER_END(Scanner)

SKIP: /* Whitespace */
{
  "\t"
| "\r"
| " "
}

TOKEN: /* Keywords */
{
    <IMPORT:        "IMPORT">
|   <IN:            "IN">
|   <MODEL:         "MODEL">
|   <BLOCKSTART:    "BEGIN">
|   <BLOCKSTOP:     "END">
|   <ANALYZE:       "ANALYZE">
|   <WITH:          "WITH">
}

TOKEN: /* Whitespace */
{
    <EOL:           "\n">
}

TOKEN: /* Operators */
{
    <COMPARISON:    "=" | "<=" | ">=" | "<" | ">" >
|   <LOGICAL:       "AND" | "OR" >
|   <DEFINERULE:    ":" >
|   <IS:            "IS" >
}

TOKEN: /* Regex */
{
    <CONSTRAINT:    "LETTERS"|"NUMBERS">
}

TOKEN: /* Identifiers */
{
    <FILENAME:      (["A"-"Z","a"-"z","0"-"9","-","_"])+".csv">
|   <ID:            (["A"-"Z","a"-"z"](["A"-"Z","a"-"z","0"-"9","_"])*)|("_"(["A"-"Z","a"-"z","0"-"9"])(["A"-"Z","a"-"z","0"-"9","_"])*)>
}

TOKEN: /* Numbers */
{
    <INT:           ["1"-"9"](["0"-"9"])* | "0" >
|   <FLOAT:         "0" "." (["0"-"9"])+ | ["1"-"9"] (["0"-"9"])* "." (["0"-"9"])+ >
}

MORE :
{
    "//" : IN_COMMENT
}

<IN_COMMENT>
SPECIAL_TOKEN :
{
  <COMMENT: "//" > : DEFAULT
}

<IN_COMMENT>
MORE :
{
  < ~[] >
}

void PROG():    {}  { IMPRT() MDL() (STMT())* | MDL() IMPRT() (STMT())* }
void STMT():    {}  { ANLZ() ((<EOL>)+ | <EOF>) }
void ANLZ():    {}  { <ANALYZE> <ID> <WITH> <ID> }
void IMPRT():   {}  { <IMPORT> <FILENAME> <IN> <ID> ((<EOL>)+ | <EOF>) }
void MDL():     {}  { <MODEL> <ID> <BLOCKSTART> (<EOL>)+ (RLE())* <BLOCKSTOP> ((<EOL>)+ | <EOF>) }
void RLE():     {}  { <ID> <DEFINERULE> EXPR() (<EOL>)+ }
void EXPR():    {}  { SUBEXPR() (<LOGICAL> SUBEXPR())* }
void SUBEXPR(): {}  { <ID> (<IS> <CONSTRAINT> | <COMPARISON> NUM()) }
void NUM():     {}  { <INT> | <FLOAT> }