/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Scanner.jj */
/*@egen*/
PARSER_BEGIN(Scanner)

import java.io.*;

public class Scanner/*@bgen(jjtree)*/implements ScannerTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTScannerState jjtree = new JJTScannerState();

/*@egen*/

    public static void main(String[] args) throws ParseException, FileNotFoundException {
        if ( args.length < 1 ) {
           System.out.println("Please pass in the filename for a parameter.");
           System.exit(1);
        }

        Scanner parser = new Scanner( new FileInputStream(args[0]) );

        try {
            SimpleNode n = parser.PROG();
            n.dump("");
            System.out.println("Finished succesfully");
        }catch(Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }
}

PARSER_END(Scanner)

SKIP: /* Whitespace */
{
  "\t"
| "\r"
| " "
}

TOKEN: /* Keywords */
{
    <IMPORT:        "IMPORT">
|   <IN:            "IN">
|   <MODEL:         "MODEL">
|   <ANALYZE:       "ANALYZE">
|   <WITH:          "WITH">
|   <ROW:           "ROW">
|   <COL:           "COL">
|   <NOHEADERS:     "NOHEADERS">
|   <IDKEY:         "ID">
}

TOKEN: /* Whitespace */
{
    <EOL:           "\n">
}

TOKEN: /* Operators */
{
    <COMPARISON:    "<=" | ">=" | "<" | ">" | "=">
|   <EQUAL:         "=">
|   <DEFINERULE:    ":" >
|   <IS:            "IS" >
|   <OR:            "OR">
|   <AND:           "AND">
|   <NOT:           "NOT">
}

TOKEN: /* Regex */
{
    <CONSTRAINT:    "LETTERS"|"NUMBERS"|"DECIMAL"|"INTEGER"|"EMPTY"|"LOWERCASE"|"UPPERCASE">
|   <MAXLENGTH:      "MAXLENGTH">
|   <MINLENGTH:      "MINLENGTH">
|   <CONTAINS:      "CONTAINS">
}

TOKEN: /*/

TOKEN: /* Delimiters */
{
    <COMMA:      ",">
|   <DASH:       "-">
|   <LPAREN:     "(">
|   <RPAREN:     ")">
|   <ARGSSTART:  "BEGIN">
|   <ARGSSTOP:   "END">
}

TOKEN: /* Literals */
{
    <INT:           ("-")?["1"-"9"](["0"-"9"])* | ("-")?"0" >
|   <FLOAT:         ("-")?"0" "." (["0"-"9"])+ | ("-")?["1"-"9"] (["0"-"9"])* "." (["0"-"9"])+ >
|   <STRING:        "\"" (~["\""])* "\"" >
}

TOKEN: /* Identifiers */
{
    <FILENAME:      (["A"-"Z","a"-"z","0"-"9","-","_"])+".csv">
|   <ID:            (["A"-"Z","a"-"z"](["A"-"Z","a"-"z","0"-"9","_"])*)|("_"(["A"-"Z","a"-"z","0"-"9"])(["A"-"Z","a"-"z","0"-"9","_"])*)>
}


MORE :
{
    "//" : IN_COMMENT
}

<IN_COMMENT>
SPECIAL_TOKEN :
{
  <COMMENT: "//" > : DEFAULT
}

<IN_COMMENT>
MORE :
{
  < ~[] >
}

SimpleNode PROG():    {/*@bgen(jjtree) PROG */
  SimpleNode jjtn000 = new SimpleNode(JJTPROG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}  
{/*@bgen(jjtree) PROG */
    try {
/*@egen*/ 
    (MDL() IMPRT() STMT() | IMPRT() MDL() STMT())/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void IMPRT()        :   
{/*@bgen(jjtree) IMPORT */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}  
{/*@bgen(jjtree) IMPORT */
  try {
/*@egen*/ <IMPORT> FLNM() <IN> IDEN() (<ARGSSTART> (<EOL>)+ IMOPTIONS() <ARGSSTOP>) (<EOL>)+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void IMOPTIONS():
{/*@bgen(jjtree) IMOPTIONS */
  SimpleNode jjtn000 = new SimpleNode(JJTIMOPTIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IMOPTIONS */
    try {
/*@egen*/
    <NOHEADERS> (<EOL>)+ (<IDKEY> (IDEN() | INTEGER()) (<EOL>)+)? | <IDKEY> (IDEN() | INTEGER()) (<EOL>)+ (<NOHEADERS> (<EOL>)+)?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FLNM():    
{/*@bgen(jjtree) FLNM */
  SimpleNode jjtn000 = new SimpleNode(JJTFLNM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) FLNM */
    try {
/*@egen*/
    t = <FILENAME>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value = t.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MDL()       :     
{/*@bgen(jjtree) MODEL */
  SimpleNode jjtn000 = new SimpleNode(JJTMODEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}  
{/*@bgen(jjtree) MODEL */
  try {
/*@egen*/ <MODEL> IDEN() <ARGSSTART> (<EOL>)+ (RLE())* <ARGSSTOP> (<EOL>)+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void RLE()      :     
{}
{/*@bgen(jjtree) #RULE(> 1) */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTRULE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/ (IDEN() <DEFINERULE> EXPR() (<EOL>)+)/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/          }

void EXPR()      :
{}
{
    OREXPR()
}

void OREXPR()      :
{ int count = 0; }
{/*@bgen(jjtree) #OR( count > 0) */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTOR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (ANDEXPR() (<OR> { count++; } ANDEXPR())*)/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  count > 0);
      }
    }
/*@egen*/            
}

void ANDEXPR()      :
{ int count = 0; }
{/*@bgen(jjtree) #AND( count > 0) */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTAND);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (VPEXPR() (<AND> { count++; } VPEXPR())*)/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  count > 0);
      }
    }
/*@egen*/             
}

void VPEXPR()      :
{}
{
    VALEXPR()
    | <LPAREN> EXPR() <RPAREN>
}

void VALEXPR():
{/*@bgen(jjtree) VALEXPR */
  SimpleNode jjtn000 = new SimpleNode(JJTVALEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) VALEXPR */
    try {
/*@egen*/
    IDEN()
    (t = <IS> REGEX()
    | t = <COMPARISON> NUM())/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ { jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void REGEX():
{/*@bgen(jjtree) REGEX */
  SimpleNode jjtn000 = new SimpleNode(JJTREGEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) REGEX */
    try {
/*@egen*/
    <LPAREN> REGOREXPR() <RPAREN> | CONSTRAINTS() | STRING()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void REGOREXPR():
{/*@bgen(jjtree) REGOREXPR */
  SimpleNode jjtn000 = new SimpleNode(JJTREGOREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) REGOREXPR */
    try {
/*@egen*/
    REGEXPR() (<OR> REGEXPR())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void REGEXPR():
{/*@bgen(jjtree) REGEXPR */
  SimpleNode jjtn000 = new SimpleNode(JJTREGEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) REGEXPR */
    try {
/*@egen*/
    <LPAREN> REGOREXPR() <RPAREN>
|   (<NOT>)? (((<CONTAINS>)? STRING())+ | CONSTRAINTS() (<COMMA> LENGTH())?)/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void LENGTH():
{/*@bgen(jjtree) LENGTH */
  SimpleNode jjtn000 = new SimpleNode(JJTLENGTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LENGTH */
    try {
/*@egen*/
    <MINLENGTH> <EQUAL> INTEGER() (<COMMA> <MAXLENGTH> <EQUAL> INTEGER())?
|   <MAXLENGTH> <EQUAL> INTEGER() (<COMMA> <MINLENGTH> <EQUAL> INTEGER())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void CONSTRAINTS():
{/*@bgen(jjtree) CONSTRAINTS */
  SimpleNode jjtn000 = new SimpleNode(JJTCONSTRAINTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) CONSTRAINTS */
    try {
/*@egen*/
    t = <CONSTRAINT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.value = t.image; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void STRING():
{/*@bgen(jjtree) STRING */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) STRING */
    try {
/*@egen*/
    (t = <STRING>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ { jjtn000.value = t.image; })/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NUM()      :     
{}
{ INTEGER() | FLOATY() }

void INTEGER(): 
{/*@bgen(jjtree) INTEGER */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) INTEGER */
    try {
/*@egen*/
    t = <INT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value = t.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FLOATY(): 
{/*@bgen(jjtree) FLOATY */
  SimpleNode jjtn000 = new SimpleNode(JJTFLOATY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) FLOATY */
    try {
/*@egen*/
    t = <FLOAT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value = t.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void STMT()      :
{}
{ ANLZ() ((<EOL>)+ | <EOF>) STMT() | <EOF> }

void ANLZ()         :
{/*@bgen(jjtree) ANALYZE */
  SimpleNode jjtn000 = new SimpleNode(JJTANALYZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ANALYZE */
  try {
/*@egen*/ <ANALYZE> IDEN() <WITH> IDEN() (<ARGSSTART> (<EOL>)+ ANOPTIONS() <ARGSSTOP>)?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void ANOPTIONS():
{/*@bgen(jjtree) ANOPTIONS */
  SimpleNode jjtn000 = new SimpleNode(JJTANOPTIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ANOPTIONS */
    try {
/*@egen*/
    (IDEN() (<EOL>)+)* ( (ROWS() (<EOL>)+)? (IDEN() (<EOL>)+)* (COLS() (<EOL>)+)? (IDEN() (<EOL>)+)* | (COLS() (<EOL>)+)? (IDEN() (<EOL>)+)* (ROWS() (<EOL>)+)? (IDEN() (<EOL>)+)* )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ROWS():
{/*@bgen(jjtree) ROWS */
  SimpleNode jjtn000 = new SimpleNode(JJTROWS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ROWS */
    try {
/*@egen*/
    <ROW> INDEX()(<COMMA> INDEX())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void COLS():
{/*@bgen(jjtree) COLS */
  SimpleNode jjtn000 = new SimpleNode(JJTCOLS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) COLS */
    try {
/*@egen*/
    <COL> ( IDEN()(<COMMA> IDEN())* | (INDEX()(<COMMA> INDEX())*))/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void INDEX():
{/*@bgen(jjtree) INDEX */
  SimpleNode jjtn000 = new SimpleNode(JJTINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) INDEX */
    try {
/*@egen*/
    INTEGER() (<DASH> INTEGER())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void IDEN():
{/*@bgen(jjtree) IDEN */
  SimpleNode jjtn000 = new SimpleNode(JJTIDEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) IDEN */
    try {
/*@egen*/
    t = <ID>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value = t.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}