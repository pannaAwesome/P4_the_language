/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Scanner.jj */
/*@egen*/options {
                 
                   
                                            
}


PARSER_BEGIN(Scanner)

import java.io.*;

public class Scanner/*@bgen(jjtree)*/implements ScannerTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTScannerState jjtree = new JJTScannerState();

/*@egen*/

    public static void main(String[] args) throws ParseException, FileNotFoundException {
        if ( args.length < 1 ) {
           System.out.println("Please pass in the filename for a parameter.");
           System.exit(1);
        }

        Scanner parser = new Scanner( new FileInputStream(args[0]) );

        try {
            ASTPROG n = parser.PROG();
            n.dump("");
            System.out.println("Finished succesfully");
        }catch(Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }
}

PARSER_END(Scanner)

SKIP: /* Whitespace */
{
  "\t"
| "\r"
| " "
}

TOKEN: /* Keywords */
{
    <IMPORT:        "IMPORT">
|   <IN:            "IN">
|   <MODEL:         "MODEL">
|   <BLOCKSTART:    "BEGIN">
|   <BLOCKSTOP:     "END">
|   <ANALYZE:       "ANALYZE">
|   <WITH:          "WITH">
}

TOKEN: /* Whitespace */
{
    <EOL:           "\n">
}

TOKEN: /* Operators */
{
    <COMPARISON:    "<=" | ">=" | "<" | ">" >
|   <EQUAL:         "=">
|   <DEFINERULE:    ":" >
|   <IS:            "IS" >
|   <OR:            "OR">
|   <AND:           "AND">
}

TOKEN: /* Regex */
{
    <CONSTRAINT:    "LETTERS"|"NUMBERS">
}

TOKEN: /* Literals */
{
    <INT:           ("-")?["1"-"9"](["0"-"9"])* | ("-")?"0" >
|   <FLOAT:         ("-")?"0" "." (["0"-"9"])+ | ("-")?["1"-"9"] (["0"-"9"])* "." (["0"-"9"])+ >
|   <STRING:        "\"" (~["\""])* "\"" >
}

TOKEN: /* Identifiers */
{
    <FILENAME:      (["A"-"Z","a"-"z","0"-"9","-","_"])+".csv">
|   <ID:            (["A"-"Z","a"-"z"](["A"-"Z","a"-"z","0"-"9","_"])*)|("_"(["A"-"Z","a"-"z","0"-"9"])(["A"-"Z","a"-"z","0"-"9","_"])*)>
}



MORE :
{
    "//" : IN_COMMENT
}

<IN_COMMENT>
SPECIAL_TOKEN :
{
  <COMMENT: "//" > : DEFAULT
}

<IN_COMMENT>
MORE :
{
  < ~[] >
}

ASTPROG PROG():    {/*@bgen(jjtree) PROG */
  ASTPROG jjtn000 = new ASTPROG(JJTPROG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PROG */
    try {
/*@egen*/ 
    (MDL() IMPRT() STMT() | IMPRT() MDL() STMT())/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void IMPRT()        :   
{/*@bgen(jjtree) IMPORT */
  ASTIMPORT jjtn000 = new ASTIMPORT(JJTIMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}  
{/*@bgen(jjtree) IMPORT */
  try {
/*@egen*/ <IMPORT> FLNM() <IN> IDEN() (<EOL>)+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void FLNM():    
{/*@bgen(jjtree) FLNM */
  ASTFLNM jjtn000 = new ASTFLNM(JJTFLNM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) FLNM */
    try {
/*@egen*/
    t = <FILENAME>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value = t.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MDL()       :     
{/*@bgen(jjtree) MODEL */
  ASTMODEL jjtn000 = new ASTMODEL(JJTMODEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}  
{/*@bgen(jjtree) MODEL */
  try {
/*@egen*/ <MODEL> IDEN() <BLOCKSTART> (<EOL>)+ (RLE())* <BLOCKSTOP> (<EOL>)+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void RLE()      :     
{}
{/*@bgen(jjtree) #RULE(> 1) */
  {
    ASTRULE jjtn001 = new ASTRULE(JJTRULE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/ (IDEN() <DEFINERULE> EXPR() (<EOL>)+)/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/          }

void EXPR()      :
{}
{
    OREXPR()
}

void OREXPR()      :
{ int count = 0; }
{/*@bgen(jjtree) #OR( count > 0) */
    {
      ASTOR jjtn001 = new ASTOR(JJTOR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (ANDEXPR() (<OR> { count++; } ANDEXPR())*)/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  count > 0);
      }
    }
/*@egen*/            
}

void ANDEXPR()      :
{ int count = 0; }
{/*@bgen(jjtree) #AND( count > 0) */
    {
      ASTAND jjtn001 = new ASTAND(JJTAND);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (VPEXPR() (<AND> { count++; } VPEXPR())*)/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  count > 0);
      }
    }
/*@egen*/             
}

void VPEXPR()      :
{}
{
    VALEXPR()
    | "(" EXPR() ")"
}

void VALEXPR():
{/*@bgen(jjtree) VALEXPR */
  ASTVALEXPR jjtn000 = new ASTVALEXPR(JJTVALEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) VALEXPR */
    try {
/*@egen*/
    IDEN()
    (t = <IS> CONSTRAINTS()
    | t = <EQUAL> TYPES()
    | t = <COMPARISON> NUM())/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ { jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void CONSTRAINTS():
{/*@bgen(jjtree) CONSTRAINTS */
  ASTCONSTRAINTS jjtn000 = new ASTCONSTRAINTS(JJTCONSTRAINTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) CONSTRAINTS */
    try {
/*@egen*/
    t = <CONSTRAINT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.value = t.image; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TYPES():
{/*@bgen(jjtree) TYPES */
  ASTTYPES jjtn000 = new ASTTYPES(JJTTYPES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) TYPES */
    try {
/*@egen*/
    (t = <STRING>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ { jjtn000.value = t.image; })
    | NUM()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NUM()      :     
{}
{ INTEGER() | FLOATY() }

void INTEGER(): 
{/*@bgen(jjtree) INTEGER */
  ASTINTEGER jjtn000 = new ASTINTEGER(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) INTEGER */
    try {
/*@egen*/
    t = <INT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value = t.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FLOATY(): 
{/*@bgen(jjtree) FLOATY */
  ASTFLOATY jjtn000 = new ASTFLOATY(JJTFLOATY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) FLOATY */
    try {
/*@egen*/
    t = <FLOAT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value = t.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void STMT()      :
{}
{ ANLZ() ((<EOL>)+ | <EOF>) STMT() | <EOF> }

void ANLZ()         :
{/*@bgen(jjtree) ANALYZE */
  ASTANALYZE jjtn000 = new ASTANALYZE(JJTANALYZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ANALYZE */
  try {
/*@egen*/ <ANALYZE> IDEN() <WITH> IDEN()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void IDEN():
{/*@bgen(jjtree) IDEN */
  ASTIDEN jjtn000 = new ASTIDEN(JJTIDEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) IDEN */
    try {
/*@egen*/
    t = <ID>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value = t.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}