/* Generated By:JJTree&JavaCC: Do not edit this line. ScannerTokenManager.java */
package SyntaxAnalysis.TreeFiles;

import java.io.*;

/** Token Manager. */
public class ScannerTokenManager implements ScannerConstants {

   /** Debug output. */
   public static java.io.PrintStream debugStream = System.out;

   /** Set debug output. */
   public static void setDebugStream(java.io.PrintStream ds) {
      debugStream = ds;
   }

   private static final int jjStopStringLiteralDfa_0(int pos, long active0) {
      switch (pos) {
      case 0:
         if ((active0 & 0x387f0L) != 0L) {
            jjmatchedKind = 23;
            return 24;
         }
         return -1;
      case 1:
         if ((active0 & 0x18020L) != 0L)
            return 24;
         if ((active0 & 0x207d0L) != 0L) {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
            return 24;
         }
         return -1;
      case 2:
         if ((active0 & 0x20100L) != 0L)
            return 24;
         if ((active0 & 0x6d0L) != 0L) {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
            return 24;
         }
         return -1;
      case 3:
         if ((active0 & 0x400L) != 0L)
            return 24;
         if ((active0 & 0x2d0L) != 0L) {
            jjmatchedKind = 23;
            jjmatchedPos = 3;
            return 24;
         }
         return -1;
      case 4:
         if ((active0 & 0xc0L) != 0L)
            return 24;
         if ((active0 & 0x210L) != 0L) {
            jjmatchedKind = 23;
            jjmatchedPos = 4;
            return 24;
         }
         return -1;
      case 5:
         if ((active0 & 0x10L) != 0L)
            return 24;
         if ((active0 & 0x200L) != 0L) {
            jjmatchedKind = 23;
            jjmatchedPos = 5;
            return 24;
         }
         return -1;
      default:
         return -1;
      }
   }

   private static final int jjStartNfa_0(int pos, long active0) {
      return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
   }

   static private int jjStopAtPos(int pos, int kind) {
      jjmatchedKind = kind;
      jjmatchedPos = pos;
      return pos + 1;
   }

   static private int jjMoveStringLiteralDfa0_0() {
      switch (curChar) {
      case 10:
         return jjStopAtPos(0, 11);
      case 40:
         return jjStopAtPos(0, 27);
      case 41:
         return jjStopAtPos(0, 28);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 58:
         return jjStopAtPos(0, 14);
      case 61:
         return jjStopAtPos(0, 13);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x20200L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x8030L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x400L);
      default:
         return jjMoveNfa_0(1, 0);
      }
   }

   static private int jjMoveStringLiteralDfa1_0(long active0) {
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(0, active0);
         return 1;
      }
      switch (curChar) {
      case 47:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         break;
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x10L);
      case 78:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(1, 5, 24);
         return jjMoveStringLiteralDfa2_0(active0, 0x20300L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 82:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 16, 24);
         break;
      case 83:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 15, 24);
         break;
      default:
         break;
      }
      return jjStartNfa_0(0, active0);
   }

   static private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(0, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(1, active0);
         return 2;
      }
      switch (curChar) {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 68:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 24);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 24);
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x10L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      default:
         break;
      }
      return jjStartNfa_0(1, active0);
   }

   static private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(1, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(2, active0);
         return 3;
      }
      switch (curChar) {
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 72:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 24);
         break;
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x10L);
      default:
         break;
      }
      return jjStartNfa_0(2, active0);
   }

   static private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(2, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(3, active0);
         return 4;
      }
      switch (curChar) {
      case 76:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 6, 24);
         break;
      case 78:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 7, 24);
         break;
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x10L);
      case 89:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      default:
         break;
      }
      return jjStartNfa_0(3, active0);
   }

   static private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(3, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(4, active0);
         return 5;
      }
      switch (curChar) {
      case 84:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 4, 24);
         break;
      case 90:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      default:
         break;
      }
      return jjStartNfa_0(4, active0);
   }

   static private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(4, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(5, active0);
         return 6;
      }
      switch (curChar) {
      case 69:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 9, 24);
         break;
      default:
         break;
      }
      return jjStartNfa_0(5, active0);
   }

   static private int jjStartNfaWithStates_0(int pos, int kind, int state) {
      jjmatchedKind = kind;
      jjmatchedPos = pos;
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         return pos + 1;
      }
      return jjMoveNfa_0(state, pos + 1);
   }

   static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };

   static private int jjMoveNfa_0(int startState, int curPos) {
      int startsAt = 0;
      jjnewStateCnt = 43;
      int i = 1;
      jjstateSet[0] = startState;
      int kind = 0x7fffffff;
      for (;;) {
         if (++jjround == 0x7fffffff)
            ReInitRounds();
         if (curChar < 64) {
            long l = 1L << curChar;
            do {
               switch (jjstateSet[--i]) {
               case 24:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddTwoStates(20, 24);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 23;
                  if ((0x3ff000000000000L & l) != 0L) {
                     if (kind > 23)
                        kind = 23;
                     jjCheckNAdd(26);
                  }
                  break;
               case 1:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddTwoStates(20, 24);
                  else if ((0x5000000000000000L & l) != 0L) {
                     if (kind > 12)
                        kind = 12;
                  } else if (curChar == 34)
                     jjCheckNAddTwoStates(18, 19);
                  if ((0x3fe000000000000L & l) != 0L) {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAddStates(0, 2);
                  } else if (curChar == 45)
                     jjAddStates(3, 6);
                  else if (curChar == 48) {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(36);
                  } else if (curChar == 62)
                     jjCheckNAdd(0);
                  else if (curChar == 60)
                     jjCheckNAdd(0);
                  break;
               case 0:
                  if (curChar == 61 && kind > 12)
                     kind = 12;
                  break;
               case 2:
                  if (curChar == 62)
                     jjCheckNAdd(0);
                  break;
               case 3:
                  if ((0x5000000000000000L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 17:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 18:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 19:
                  if (curChar == 34 && kind > 21)
                     kind = 21;
                  break;
               case 20:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddTwoStates(20, 24);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(26);
                  break;
               case 28:
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddStates(0, 2);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 33:
                  if (curChar == 46)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(34);
                  break;
               case 35:
                  if (curChar != 48)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAdd(36);
                  break;
               case 36:
                  if (curChar == 46)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if (curChar == 45)
                     jjAddStates(3, 6);
                  break;
               case 39:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAdd(31);
                  break;
               case 40:
                  if (curChar == 48 && kind > 19)
                     kind = 19;
                  break;
               case 41:
                  if (curChar == 48)
                     jjCheckNAdd(36);
                  break;
               case 42:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               default:
                  break;
               }
            } while (i != startsAt);
         } else if (curChar < 128) {
            long l = 1L << (curChar & 077);
            do {
               switch (jjstateSet[--i]) {
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L) {
                     if (kind > 23)
                        kind = 23;
                     jjCheckNAdd(26);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(20, 24);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(20, 24);
                  if ((0x7fffffe07fffffeL & l) != 0L) {
                     if (kind > 23)
                        kind = 23;
                     jjCheckNAdd(26);
                  } else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 28;
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 4:
                  if (curChar == 83 && kind > 18)
                     kind = 18;
                  break;
               case 5:
               case 11:
                  if (curChar == 82)
                     jjCheckNAdd(4);
                  break;
               case 6:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 18:
                  jjAddStates(7, 8);
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(20, 24);
                  break;
               case 21:
                  if (curChar == 118 && kind > 22)
                     kind = 22;
                  break;
               case 22:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 25:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(26);
                  break;
               case 27:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(29);
                  break;
               default:
                  break;
               }
            } while (i != startsAt);
         } else {
            int i2 = (curChar & 0xff) >> 6;
            long l2 = 1L << (curChar & 077);
            do {
               switch (jjstateSet[--i]) {
               case 18:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(7, 8);
                  break;
               default:
                  break;
               }
            } while (i != startsAt);
         }
         if (kind != 0x7fffffff) {
            jjmatchedKind = kind;
            jjmatchedPos = curPos;
            kind = 0x7fffffff;
         }
         ++curPos;
         if ((i = jjnewStateCnt) == (startsAt = 43 - (jjnewStateCnt = startsAt)))
            return curPos;
         try {
            curChar = input_stream.readChar();
         } catch (java.io.IOException e) {
            return curPos;
         }
      }
   }

   static private int jjMoveStringLiteralDfa0_1() {
      switch (curChar) {
      case 47:
         return jjMoveStringLiteralDfa1_1(0x2000000L);
      default:
         return 1;
      }
   }

   static private int jjMoveStringLiteralDfa1_1(long active0) {
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         return 1;
      }
      switch (curChar) {
      case 47:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      default:
         return 2;
      }
      return 2;
   }

   static final int[] jjnextStates = { 31, 32, 33, 39, 40, 41, 42, 18, 19, };

   /** Token literal values. */
   public static final String[] jjstrLiteralImages = { "", null, null, null, "\111\115\120\117\122\124", "\111\116",
         "\115\117\104\105\114", "\102\105\107\111\116", "\105\116\104", "\101\116\101\114\131\132\105",
         "\127\111\124\110", "\12", null, "\75", "\72", "\111\123", "\117\122", "\101\116\104", null, null, null, null,
         null, null, null, null, null, "\50", "\51", };

   /** Lexer state names. */
   public static final String[] lexStateNames = { "DEFAULT", "IN_COMMENT", };

   /** Lex State array. */
   public static final int[] jjnewLexState = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
         -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, };
   static final long[] jjtoToken = { 0x18fffff1L, };
   static final long[] jjtoSkip = { 0x200000eL, };
   static final long[] jjtoSpecial = { 0x2000000L, };
   static final long[] jjtoMore = { 0x5000000L, };
   static protected SimpleCharStream input_stream;
   static private final int[] jjrounds = new int[43];
   static private final int[] jjstateSet = new int[86];
   private static final StringBuilder jjimage = new StringBuilder();
   private static StringBuilder image = jjimage;
   private static int jjimageLen;
   private static int lengthOfMatch;
   static protected char curChar;

   /** Constructor. */
   public ScannerTokenManager(SimpleCharStream stream) {
      if (input_stream != null)
         throw new TokenMgrError(
               "ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.",
               TokenMgrError.STATIC_LEXER_ERROR);
      input_stream = stream;
   }

   /** Constructor. */
   public ScannerTokenManager(SimpleCharStream stream, int lexState) {
      this(stream);
      SwitchTo(lexState);
   }

   /** Reinitialise parser. */
   static public void ReInit(SimpleCharStream stream) {
      jjmatchedPos = jjnewStateCnt = 0;
      curLexState = defaultLexState;
      input_stream = stream;
      ReInitRounds();
   }

   static private void ReInitRounds() {
      int i;
      jjround = 0x80000001;
      for (i = 43; i-- > 0;)
         jjrounds[i] = 0x80000000;
   }

   /** Reinitialise parser. */
   static public void ReInit(SimpleCharStream stream, int lexState) {
      ReInit(stream);
      SwitchTo(lexState);
   }

   /** Switch to specified lex state. */
   static public void SwitchTo(int lexState) {
      if (lexState >= 2 || lexState < 0)
         throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
               TokenMgrError.INVALID_LEXICAL_STATE);
      else
         curLexState = lexState;
   }

   static protected Token jjFillToken() {
      final Token t;
      final String curTokenImage;
      final int beginLine;
      final int endLine;
      final int beginColumn;
      final int endColumn;
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
      t = Token.newToken(jjmatchedKind, curTokenImage);

      t.beginLine = beginLine;
      t.endLine = endLine;
      t.beginColumn = beginColumn;
      t.endColumn = endColumn;

      return t;
   }

   static int curLexState = 0;
   static int defaultLexState = 0;
   static int jjnewStateCnt;
   static int jjround;
   static int jjmatchedPos;
   static int jjmatchedKind;

   /** Get the next Token. */
   public static Token getNextToken() {
      Token specialToken = null;
      Token matchedToken;
      int curPos = 0;

      EOFLoop: for (;;) {
         try {
            curChar = input_stream.BeginToken();
         } catch (java.io.IOException e) {
            jjmatchedKind = 0;
            matchedToken = jjFillToken();
            matchedToken.specialToken = specialToken;
            return matchedToken;
         }
         image = jjimage;
         image.setLength(0);
         jjimageLen = 0;

         for (;;) {
            switch (curLexState) {
            case 0:
               try {
                  input_stream.backup(0);
                  while (curChar <= 32 && (0x100002200L & (1L << curChar)) != 0L)
                     curChar = input_stream.BeginToken();
               } catch (java.io.IOException e1) {
                  continue EOFLoop;
               }
               jjmatchedKind = 0x7fffffff;
               jjmatchedPos = 0;
               curPos = jjMoveStringLiteralDfa0_0();
               break;
            case 1:
               jjmatchedKind = 0x7fffffff;
               jjmatchedPos = 0;
               curPos = jjMoveStringLiteralDfa0_1();
               if (jjmatchedPos == 0 && jjmatchedKind > 26) {
                  jjmatchedKind = 26;
               }
               break;
            }
            if (jjmatchedKind != 0x7fffffff) {
               if (jjmatchedPos + 1 < curPos)
                  input_stream.backup(curPos - jjmatchedPos - 1);
               if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                  matchedToken = jjFillToken();
                  matchedToken.specialToken = specialToken;
                  if (jjnewLexState[jjmatchedKind] != -1)
                     curLexState = jjnewLexState[jjmatchedKind];
                  return matchedToken;
               } else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                  if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                     matchedToken = jjFillToken();
                     if (specialToken == null)
                        specialToken = matchedToken;
                     else {
                        matchedToken.specialToken = specialToken;
                        specialToken = (specialToken.next = matchedToken);
                     }
                     SkipLexicalActions(matchedToken);
                  } else
                     SkipLexicalActions(null);
                  if (jjnewLexState[jjmatchedKind] != -1)
                     curLexState = jjnewLexState[jjmatchedKind];
                  continue EOFLoop;
               }
               jjimageLen += jjmatchedPos + 1;
               if (jjnewLexState[jjmatchedKind] != -1)
                  curLexState = jjnewLexState[jjmatchedKind];
               curPos = 0;
               jjmatchedKind = 0x7fffffff;
               try {
                  curChar = input_stream.readChar();
                  continue;
               } catch (java.io.IOException e1) {
               }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
               input_stream.readChar();
               input_stream.backup(1);
            } catch (java.io.IOException e1) {
               EOFSeen = true;
               error_after = curPos <= 1 ? "" : input_stream.GetImage();
               if (curChar == '\n' || curChar == '\r') {
                  error_line++;
                  error_column = 0;
               } else
                  error_column++;
            }
            if (!EOFSeen) {
               input_stream.backup(1);
               error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar,
                  TokenMgrError.LEXICAL_ERROR);
         }
      }
   }

   static void SkipLexicalActions(Token matchedToken) {
      switch (jjmatchedKind) {
      default:
         break;
      }
   }

   static private void jjCheckNAdd(int state) {
      if (jjrounds[state] != jjround) {
         jjstateSet[jjnewStateCnt++] = state;
         jjrounds[state] = jjround;
      }
   }

   static private void jjAddStates(int start, int end) {
      do {
         jjstateSet[jjnewStateCnt++] = jjnextStates[start];
      } while (start++ != end);
   }

   static private void jjCheckNAddTwoStates(int state1, int state2) {
      jjCheckNAdd(state1);
      jjCheckNAdd(state2);
   }

   static private void jjCheckNAddStates(int start, int end) {
      do {
         jjCheckNAdd(jjnextStates[start]);
      } while (start++ != end);
   }

}
