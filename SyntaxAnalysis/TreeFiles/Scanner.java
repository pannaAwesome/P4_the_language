
/* Generated By:JJTree&JavaCC: Do not edit this line. Scanner.java */
package SyntaxAnalysis.TreeFiles;

import java.io.*;

import ContextualAnalysis.TypeIdentifierVisitor;

public class Scanner/* @bgen(jjtree) */ implements ScannerTreeConstants, ScannerConstants {/* @bgen(jjtree) */
  protected static JJTScannerState jjtree = new JJTScannerState();

  public static void main(String[] args) throws ParseException, FileNotFoundException {
    // if (args.length < 1) {
    // System.out.println("Please pass in the filename for a parameter.");
    // System.exit(1);
    // }

    File f = new File("SyntaxAnalysis/TreeFiles/test.txt");
    FileInputStream stream = new FileInputStream(f);
    Scanner parser = new Scanner(stream);

    try {
      ASTPROG n = parser.PROG();
      n.dump("");
      System.out.println("Finished succesfully");
      n.jjtAccept(new TypeIdentifierVisitor(), null);
      System.out.println("added types");
    } catch (Exception e) {
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }

  static final public ASTPROG PROG() throws ParseException {
    /* @bgen(jjtree) PROG */
    ASTPROG jjtn000 = new ASTPROG(JJTPROG);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case MODEL:
        MDL();
        IMPRT();
        STMT();
        break;
      case IMPORT:
        IMPRT();
        MDL();
        STMT();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {
        if (true)
          return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void IMPRT() throws ParseException {
    /* @bgen(jjtree) IMPORT */
    ASTIMPORT jjtn000 = new ASTIMPORT(JJTIMPORT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IMPORT);
      FLNM();
      jj_consume_token(IN);
      IDEN();
      label_1: while (true) {
        jj_consume_token(EOL);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case EOL:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void FLNM() throws ParseException {
    /* @bgen(jjtree) FLNM */
    ASTFLNM jjtn000 = new ASTFLNM(JJTFLNM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token t;
    try {
      t = jj_consume_token(FILENAME);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.value = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void MDL() throws ParseException {
    /* @bgen(jjtree) MODEL */
    ASTMODEL jjtn000 = new ASTMODEL(JJTMODEL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MODEL);
      IDEN();
      jj_consume_token(BLOCKSTART);
      label_2: while (true) {
        jj_consume_token(EOL);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case EOL:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
      }
      label_3: while (true) {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case ID:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        RLE();
      }
      jj_consume_token(BLOCKSTOP);
      label_4: while (true) {
        jj_consume_token(EOL);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case EOL:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void RLE() throws ParseException {
    ASTRULE jjtn001 = new ASTRULE(JJTRULE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      IDEN();
      jj_consume_token(DEFINERULE);
      EXPR();
      label_5: while (true) {
        jj_consume_token(EOL);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case EOL:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_5;
        }
      }
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte001;
        }
      }
      if (jjte001 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte001;
        }
      }
      {
        if (true)
          throw (Error) jjte001;
      }
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
  }

  static final public void EXPR() throws ParseException {
    OREXPR();
  }

  static final public void OREXPR() throws ParseException {
    int count = 0;
    ASTOR jjtn001 = new ASTOR(JJTOR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      ANDEXPR();
      label_6: while (true) {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_6;
        }
        jj_consume_token(OR);
        count++;
        ANDEXPR();
      }
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte001;
        }
      }
      if (jjte001 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte001;
        }
      }
      {
        if (true)
          throw (Error) jjte001;
      }
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, count > 0);
      }
    }
  }

  static final public void ANDEXPR() throws ParseException {
    int count = 0;
    ASTAND jjtn001 = new ASTAND(JJTAND);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      VPEXPR();
      label_7: while (true) {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_7;
        }
        jj_consume_token(AND);
        count++;
        VPEXPR();
      }
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte001;
        }
      }
      if (jjte001 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte001;
        }
      }
      {
        if (true)
          throw (Error) jjte001;
      }
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, count > 0);
      }
    }
  }

  static final public void VPEXPR() throws ParseException {
    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
    case ID:
      VALEXPR();
      break;
    case 27:
      jj_consume_token(27);
      EXPR();
      jj_consume_token(28);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void VALEXPR() throws ParseException {
    /* @bgen(jjtree) VALEXPR */
    ASTVALEXPR jjtn000 = new ASTVALEXPR(JJTVALEXPR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token t;
    try {
      IDEN();
      switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case IS:
        t = jj_consume_token(IS);
        CONSTRAINTS();
        break;
      case EQUAL:
        t = jj_consume_token(EQUAL);
        TYPES();
        break;
      case COMPARISON:
        t = jj_consume_token(COMPARISON);
        NUM();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.value = t.image;
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void CONSTRAINTS() throws ParseException {
    /* @bgen(jjtree) CONSTRAINTS */
    ASTCONSTRAINTS jjtn000 = new ASTCONSTRAINTS(JJTCONSTRAINTS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token t;
    try {
      t = jj_consume_token(CONSTRAINT);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.value = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void TYPES() throws ParseException {
    /* @bgen(jjtree) TYPES */
    ASTTYPES jjtn000 = new ASTTYPES(JJTTYPES);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token t;
    try {
      switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case STRING:
        t = jj_consume_token(STRING);
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        jjtn000.value = t.image;
        break;
      case INT:
      case FLOAT:
        NUM();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void NUM() throws ParseException {
    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
    case INT:
      INTEGER();
      break;
    case FLOAT:
      FLOATY();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void INTEGER() throws ParseException {
    /* @bgen(jjtree) INTEGER */
    ASTINTEGER jjtn000 = new ASTINTEGER(JJTINTEGER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token t;
    try {
      t = jj_consume_token(INT);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.value = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void FLOATY() throws ParseException {
    /* @bgen(jjtree) FLOATY */
    ASTFLOATY jjtn000 = new ASTFLOATY(JJTFLOATY);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token t;
    try {
      t = jj_consume_token(FLOAT);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.value = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void STMT() throws ParseException {
    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
    case ANALYZE:
      ANLZ();
      switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case EOL:
        label_8: while (true) {
          jj_consume_token(EOL);
          switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
          case EOL:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_8;
          }
        }
        break;
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      STMT();
      break;
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ANLZ() throws ParseException {
    /* @bgen(jjtree) ANALYZE */
    ASTANALYZE jjtn000 = new ASTANALYZE(JJTANALYZE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ANALYZE);
      IDEN();
      jj_consume_token(WITH);
      IDEN();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void IDEN() throws ParseException {
    /* @bgen(jjtree) IDEN */
    ASTIDEN jjtn000 = new ASTIDEN(JJTIDEN);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token t;
    try {
      t = jj_consume_token(ID);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.value = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ScannerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[15];
  static private int[] jj_la1_0;
  static {
    jj_la1_init_0();
  }

  private static void jj_la1_init_0() {
    jj_la1_0 = new int[] { 0x50, 0x800, 0x800, 0x800000, 0x800, 0x800, 0x10000, 0x20000, 0x8800000, 0xb000, 0x380000,
        0x180000, 0x800, 0x801, 0x201, };
  }

  /** Constructor with InputStream. */
  public Scanner(java.io.InputStream stream) {
    this(stream, null);
  }

  /** Constructor with InputStream and supplied encoding */
  public Scanner(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try {
      jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
    } catch (java.io.UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    token_source = new ScannerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++)
      jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
    ReInit(stream, null);
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try {
      jj_input_stream.ReInit(stream, encoding, 1, 1);
    } catch (java.io.UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 15; i++)
      jj_la1[i] = -1;
  }

  /** Constructor. */
  public Scanner(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ScannerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++)
      jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 15; i++)
      jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Scanner(ScannerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++)
      jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ScannerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 15; i++)
      jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null)
      token = token.next;
    else
      token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  /** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null)
      token = token.next;
    else
      token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  /** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null)
        t = t.next;
      else
        t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt = token.next) == null)
      return (jj_ntk = (token.next = token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[29];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 15; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1 << j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 29; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
