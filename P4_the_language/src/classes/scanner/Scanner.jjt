options {
    MULTI=true;
    VISITOR=true;
    NODE_PREFIX="";
    VISITOR_DATA_TYPE="SimpleNode";
    VISITOR_RETURN_TYPE="SimpleNode";
}

PARSER_BEGIN(Scanner)
package src.classes.scanner;

import src.classes.exceptions.*;
import src.classes.types.*;
import src.classes.visitors.*;


import java.io.*;
import java.util.HashMap;

public class Scanner {
static Scanner parser = null;
public static String prettyPrint = "";
public static void main(String[] args) {
        if(args.length == 0) {
            String[] files = {
                "./ExceptionsTestFiler/StringRegelTest.txt",
                "./ExceptionsTestFiler/DecimalRegelTest.txt",
                "./ExceptionsTestFiler/IntegerRegelTest.txt",
                "./ExceptionsTestFiler/TypeRegelTest.txt",
                "./ExceptionsTestFiler/TipRegelTest.txt"
            };

            for (String fileName : files) {
                
                try {
                    File file = new File(fileName);
                    FileInputStream stream = new FileInputStream(file);
                    
                    if (parser == null) {
                    parser = new Scanner(stream);
                    } else {
                    parser.ReInit(stream);
                    SymbolTableVisitor.ST =  new HashMap<String, STVal>();
                    TypeCheckVisitor.error = 0;
                    TypeCheckVisitor.warning = 0;
                    TypeCheckVisitor.tip = 0;
                    }

                    System.out.println(file.getName());
                    SimpleNode n = parser.PROG();
                    //n.dump("");

                    System.out.println("Pretty printing:");
                    PrettyPrinterVisitor ppv = new PrettyPrinterVisitor();
                    n.jjtAccept(ppv, null);
                    System.out.println(ppv.print);

                    System.out.println("Filling the symboltable:");
                    SymbolTableVisitor stv = new SymbolTableVisitor();
                    n.jjtAccept(stv, null);
                    System.out.println(SymbolTableVisitor.ST);
                    SymbolTableVisitor.printWrongs();
                    if(SymbolTableVisitor.error == 0) {
                        System.out.println();
                        System.out.println("Checking types:");
                        TypeCheckVisitor tcv = new TypeCheckVisitor();
                        n.jjtAccept(tcv, null);
                        TypeCheckVisitor.printWrongs();
                        if(TypeCheckVisitor.error == 0) {
                            System.out.println("Finished succesfully");
                            CodeGeneratorVisitor cgv = new CodeGeneratorVisitor();
                            n.jjtAccept(cgv, null);
                            cgv.getPyFile();
                        }
                    }
                }catch(Exception e) {
                    System.out.println(e.getMessage());
                    e.printStackTrace();
                }
            }
        } else {
            try {
                File file = new File(args[0]);
                FileInputStream stream = new FileInputStream(file);
                
                if (parser == null) {
                    parser = new Scanner(stream);
                } else {
                    parser.ReInit(stream);
                    SymbolTableVisitor.ST =  new HashMap<String, STVal>();
                    TypeCheckVisitor.error = 0;
                    TypeCheckVisitor.warning = 0;
                    TypeCheckVisitor.tip = 0;
                }
                SimpleNode n = parser.PROG();

                PrettyPrinterVisitor ppv = new PrettyPrinterVisitor();
                n.jjtAccept(ppv, null);
                prettyPrint = ppv.print;
            }catch(Exception e) {
                System.out.println(e.getMessage());
                e.printStackTrace();
            }
        }       
    }
}

PARSER_END(Scanner)

SKIP: /* Whitespace */
{
  "\t"
| "\r"
| " "
}

TOKEN: /* Keywords */
{
    <IMPORT:        "IMPORT">
|   <IN:            "IN">
|   <MODEL:         "MODEL">
|   <ANALYZE:       "ANALYZE">
|   <WITH:          "WITH">
|   <ROW:           "ROW">
|   <COL:           "COL">
|   <NOHEADERS:     "NOHEADERS">
|   <IDKEY:         "ID">
|   <TO:            "TO">
|   <WHERE:         "WHERE">
}

TOKEN: /* Whitespace */
{
    <EOL:           "\n">
}

TOKEN: /* Operators */
{
    <COMPARISON:    "<=" | ">=" | "<" | ">">
|   <EQUAL:         "=">
|   <DEFINERULE:    ":" >
|   <IS:            "IS" >
|   <OR:            "OR">
|   <AND:           "AND">
|   <NOT:           "NOT">
|   <SUM:           "SUM">
|   <AVG:           "AVG">
|   <COUNT:         "COUNT">
|   <DISTINCT:      "DISTINCT">
}

TOKEN: /* Regex */
{
    <CONSTRAINT:    "LETTERS"|"DECIMAL"|"INTEGER">
|   <EMPTY:         "EMPTY">
|   <CONTAINS:      "CONTAINS">
}

TOKEN: /* Delimiters */
{
    <COMMA:      ",">
|   <LPAREN:     "(">
|   <RPAREN:     ")">
|   <ARGSSTART:  "BEGIN">
|   <ARGSSTOP:   "END">
}

TOKEN: /* Literals */
{
    <INT:           ("-")?["1"-"9"](["0"-"9"])* | ("-")?"0" >
|   <FLOAT:         ("-")?"0" "." (["0"-"9"])+ | ("-")?["1"-"9"] (["0"-"9"])* "." (["0"-"9"])+ >
|   <STRING:        "\"" (~["\""])* "\"" >
}

TOKEN: /* Identifiers */
{
    <FILENAME:      (["A"-"Z","a"-"z","0"-"9","-","_", "/", ".", ":"])+".csv">
|   <ID:            (["A"-"Z","a"-"z"](["A"-"Z","a"-"z","0"-"9","_"])*)|("_"(["A"-"Z","a"-"z","0"-"9"])(["A"-"Z","a"-"z","0"-"9","_"])*)>
}


MORE :
{
    "//" : IN_COMMENT
}

<IN_COMMENT>
SPECIAL_TOKEN :
{
  <COMMENT: "//" > : DEFAULT
}

<IN_COMMENT>
MORE :
{
  < ~[] >
}

SimpleNode PROG():    {}  
{ 
    (MDL() IMPRT() STMT() | IMPRT() MDL() STMT()) 
    { return jjtThis; }
}

void IMPRT() #IMPORT:   
{}  
{ <IMPORT> FLNM() <IN> IDEN() (<ARGSSTART> (<EOL>)+ IMOPTIONS() <ARGSSTOP>)? (<EOL>)+ }

void IMOPTIONS() #IMPOPTIONS:
{}
{
    NOHEADERS() (<EOL>)+ (<IDKEY> (IDEN() | INTEGER()) (<EOL>)+)? 
|   <IDKEY> (IDEN() | INTEGER()) (<EOL>)+ (NOHEADERS() (<EOL>)+)?
}

void FLNM():    
{ Token t; }
{
    t = <FILENAME>
    {
        jjtThis.value = t.image;
    }
}

void NOHEADERS() #NOHEADERS:
{}
{
    <NOHEADERS>
}

void MDL() #MODEL:     
{}  
{ <MODEL> IDEN() <ARGSSTART> (<EOL>)+ (RLE() | COLRLE())* <ARGSSTOP> (<EOF> | (<EOL>)+)}

void COLRLE() #void:
{}
{ 
    ( <COL> IDEN() (
        <DEFINERULE> COLEXPR() (WHERE())? (<EOL>)+
    |   <ARGSSTART> (<EOL>)+ (COLPARTRLE())+ <ARGSSTOP> (<EOL>)+
    )
    )#COLRULE(>1) 
}

void COLPARTRLE() #COLPARTRULE:
{}
{
    IDEN() <DEFINERULE> COLEXPR() (WHERE())? (<EOL>)+
}

void COLEXPR() #void:
{}
{
   COLOREXPR()
}

void COLOREXPR() #void:
{ int count = 0; }
{
    (COLANDEXPR() (<OR> { count++; } COLANDEXPR())*)#COLOR(count>0)
}

void COLANDEXPR() #void:
{ int count = 0; }
{
    (COLVPEXPR() (<AND> { count++; } COLVPEXPR())*)#COLAND(count>0)
}

void COLVPEXPR() #void:
{}
{
    COLVALEXPR()
    | <LPAREN> COLEXPR() <RPAREN>
}

void COLVALEXPR():
{ Token t; }
{
    SACD() (t = <EQUAL> { jjtThis.value = t.image;} | t = <COMPARISON> { jjtThis.value = t.image;}) COLARITHMEXPR()
}

void WHERE():
{}
{
    <WHERE> EXPR()
}

void SACD():
{ Token t; }
{
    (t = <SUM> | t = <AVG> | t = <COUNT> | t = <DISTINCT>) <LPAREN> IDEN() <RPAREN>
    { jjtThis.value = t.image; }
}

void COLARITHMEXPR() #void:
{ Token t; ADD current; }
{
    (
    COLARITHMEXPR2()
    (
    (   t = "+" COLARITHMEXPR2()
    |   t = "-" COLARITHMEXPR2()
    )
    {
        SimpleNode first = (SimpleNode) jjtree.popNode();
        SimpleNode second = (SimpleNode) jjtree.popNode();
        current = new ADD(first.id);
        current.value = t.image;
        current.jjtAddChild(first, 0);
        current.jjtAddChild(second, 1);
        jjtree.pushNode(current);
    }
    )*
    )
}

void COLARITHMEXPR2() #void:
{ Token t; MULT mult; }
{
    COLOPERANDS() 
    (
        (
            t = "*" COLOPERANDS()
        |   t = "/" COLOPERANDS()
        |   t = "%" COLOPERANDS()
        )
        {
            SimpleNode first = (SimpleNode) jjtree.popNode();
            SimpleNode second = (SimpleNode) jjtree.popNode();
            mult = new MULT(first.id);
            mult.value = t.image;
            mult.jjtAddChild(first, 0);
            mult.jjtAddChild(second, 1);
            jjtree.pushNode(mult);
        }
    )*
}

void COLOPERANDS() #void:
{}
{
    <LPAREN> COLARITHMEXPR() <RPAREN> | SACD() | NUM()
}

void RLE() #void:
{}
{ 
    (IDEN() (
        <DEFINERULE> EXPR() (<EOL>)+
    |   <ARGSSTART> (<EOL>)+ (PARTRLE())+ <ARGSSTOP> (<EOL>)+
    )
    )#RULE(>1) 
}

void PARTRLE() #PARTRULE:
{}
{
    IDEN() <DEFINERULE> EXPR() (<EOL>)+
}

void EXPR() #void:
{}
{
    OREXPR()
}

void OREXPR() #void:
{ int count = 0; }
{
    (ANDEXPR() (<OR> { count++; } ANDEXPR())*)#OR(count>0)
}

void ANDEXPR() #void:
{ int count = 0; }
{
    (VPEXPR() (<AND> { count++; } VPEXPR())*)#AND(count>0)
}

void VPEXPR() #void:
{}
{
    VALEXPR()
    | <LPAREN> EXPR() <RPAREN>
}

void VALEXPR():
{ Token t; }
{
    IDEN()
    (
        t = <IS> CONSTRAINEXPR()
    |   t = <EQUAL> (STRING() | ARITHMEXPR1())
    |   t = <COMPARISON> ARITHMEXPR1()
    |   t = <CONTAINS> STRING()
    ) 
    { jjtThis.value = t.image;}
}

void CONSTRAINEXPR() #void:
{}
{
    CONSTRAINTS() 
}

void ARITHMEXPR1() #void:
{ Token t; ADD current; }
{
    (
    ARITHMEXPR2()
    (
    (   t = "+" ARITHMEXPR2()
    |   t = "-" ARITHMEXPR2()
    )
    {
        SimpleNode first = (SimpleNode) jjtree.popNode();
        SimpleNode second = (SimpleNode) jjtree.popNode();
        current = new ADD(first.id);
        current.value = t.image;
        current.jjtAddChild(first, 0);
        current.jjtAddChild(second, 1);
        jjtree.pushNode(current);
    }
    )*
    )
}

void ARITHMEXPR2() #void:
{ Token t; MULT mult; }
{
    OPERANDS() 
    (
        (
            t = "*" OPERANDS()
        |   t = "/" OPERANDS()
        |   t = "%" OPERANDS()
        )
        {
            SimpleNode first = (SimpleNode) jjtree.popNode();
            SimpleNode second = (SimpleNode) jjtree.popNode();
            mult = new MULT(first.id);
            mult.value = t.image;
            mult.jjtAddChild(first, 0);
            mult.jjtAddChild(second, 1);
            jjtree.pushNode(mult);
        }
    )*
}

void CONSTRAINTS():
{ Token t; }
{
    t = <CONSTRAINT>
    { jjtThis.value = t.image; } |
    t = <EMPTY> { jjtThis.value = "EMPTY"; } |
    t = <NOT> <EMPTY> { jjtThis.value = "NOTEMPTY"; }
}

void OPERANDS() #void:
{}
{
    <LPAREN> ARITHMEXPR1() <RPAREN> | SACD() | IDEN() | NUM()
}

void STRING():
{ Token t; }
{
    (t = <STRING> { jjtThis.value = t.image; })
}

void NUM() #void:     
{}
{ INTEGER() | FLOATY() }

void INTEGER(): 
{ Token t; }
{
    t = <INT>
    {
        jjtThis.value = t.image;
    }
}

void FLOATY(): 
{ Token t; }
{
    t = <FLOAT>
    {
        jjtThis.value = t.image;
    }
}

void STMT() #void:
{}
{ ANLZ() ((<EOL>)+ | <EOF>) STMT() | <EOF> }

void ANLZ() #ANALYZE:
{}
{ <ANALYZE> IDEN() <WITH> IDEN() (<ARGSSTART> (<EOL>)+ ANOPTIONS() <ARGSSTOP>)?}

void ANOPTIONS() #ANLZOPTIONS:
{}
{
    (RULEOPT()) (ROWOPT() (COLOPT())? | COLOPT() (ROWOPT())?)?
}

void RULEOPT()#void: 
{}
{
    ((IDEN() (<EOL>)+)*)#RULEOPT (> 0)
}

void ROWOPT() #void:
{}
{
   ROWS() (<EOL>)+
}

void COLOPT() #void:
{}
{
    COLS() (<EOL>)+
}

void ROWS():
{}
{
    <ROW> INDEX()(<COMMA> INDEX())*
}

void COLS():
{}
{
    <COL> ( IDEN()(<COMMA> IDEN())* | (INDEX()(<COMMA> (INDEX()| IDEN())*)) )
}

void INDEX() #void:
{ int count = 0; }
{
    (INTEGER() (<TO> {count++;} INTEGER())?)#RANGE(count>0)
}

void IDEN():
{ Token t; }
{
    t = <ID>
    {
        jjtThis.value = t.image;
    }
}

void MULT():
{}
{
    "*"
}

void ADD():
{}
{
    "+"
}